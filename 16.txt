#include <linux/module.h>
#include <linux/gpio.h>
#include <linux/timer.h>
 
static struct timer_list gpio_timer;
static int gpio_number = 24;
 
static void toggle_gpio(struct timer_list *t)
{
    static bool state = 0;
 
    gpio_set_value(gpio_number, state);
    state = !state;
 
    mod_timer(&gpio_timer, jiffies + msecs_to_jiffies(1000));
}
 
static int __init gpio_driver_example_init(void)
{
    int result = gpio_request(gpio_number, "sysfs");
 
    if (result)
    {
        pr_err("Cannot request GPIO %d\n", gpio_number);
        return result;
    }
 
    gpio_direction_output(gpio_number, 0);
    gpio_export(gpio_number, false);
 
    timer_setup(&gpio_timer, toggle_gpio, 0);
    mod_timer(&gpio_timer, jiffies + msecs_to_jiffies(1000));
 
    pr_info("GPIO driver example initialized\n");
    return 0;
}
 
static void __exit gpio_driver_example_exit(void)
{
    del_timer(&gpio_timer);
    gpio_unexport(gpio_number);
    gpio_free(gpio_number);
 
    pr_info("GPIO driver example exited\n");
}
 
module_init(gpio_driver_example_init);
module_exit(gpio_driver_example_exit);
 
MODULE_LICENSE("GPL");
MODULE_AUTHOR("Your Name");
MODULE_DESCRIPTION("GPIO Driver Example that Toggles an LED");
